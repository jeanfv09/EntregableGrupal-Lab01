// <auto-generated />
using System;
using Lab01_Grupo1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab01_Grupal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251015023229_AddPagoPropertiesToCita")]
    partial class AddPagoPropertiesToCita
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Lab01_Grupo1.Models.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_cita");

                    b.Property<int?>("AsignadoPor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("asignado_por");

                    b.Property<string>("CodigoCita")
                        .HasColumnType("TEXT")
                        .HasColumnName("codigo_cita");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("especialidad");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("estado");

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("estado_pago");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT")
                        .HasColumnName("fecha_hora");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("TEXT")
                        .HasColumnName("fecha_pago");

                    b.Property<int?>("IdMedico")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_medico");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_paciente");

                    b.Property<string>("MetodoPago")
                        .HasColumnType("TEXT")
                        .HasColumnName("metodo_pago");

                    b.Property<string>("MotivoConsulta")
                        .HasColumnType("TEXT")
                        .HasColumnName("motivo_consulta");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT")
                        .HasColumnName("observaciones");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT")
                        .HasColumnName("precio");

                    b.Property<string>("Prioridad")
                        .HasColumnType("TEXT")
                        .HasColumnName("prioridad");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_id");

                    b.HasKey("IdCita");

                    b.HasIndex("AsignadoPor");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.Medico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_medico");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("especialidad");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_usuario");

                    b.HasKey("IdMedico");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.PerfilMedico", b =>
                {
                    b.Property<int>("IdPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_perfil");

                    b.Property<string>("Egreso")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("egreso");

                    b.Property<string>("Experiencia")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("experiencia");

                    b.Property<int>("IdMedico")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_medico");

                    b.Property<string>("Idiomas")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("idiomas");

                    b.Property<string>("PaisFormacion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("pais_formacion");

                    b.Property<string>("TipoContrato")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tipo_contrato");

                    b.Property<string>("TurnoPreferido")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("turno_preferido");

                    b.Property<string>("Universidad")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("universidad");

                    b.HasKey("IdPerfil");

                    b.HasIndex("IdMedico")
                        .IsUnique();

                    b.ToTable("Perfil_Medico");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.TelefonoMedico", b =>
                {
                    b.Property<int>("IdTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_telefono");

                    b.Property<int>("IdMedico")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_medico");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("telefono");

                    b.HasKey("IdTelefono");

                    b.HasIndex("IdMedico");

                    b.ToTable("Telefono_Medico");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("clave");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("correo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("nombre");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("rol");

                    b.Property<string>("UsuarioNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("usuario");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.Cita", b =>
                {
                    b.HasOne("Lab01_Grupo1.Models.Usuario", "Asignador")
                        .WithMany()
                        .HasForeignKey("AsignadoPor");

                    b.HasOne("Lab01_Grupo1.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("IdMedico");

                    b.HasOne("Lab01_Grupo1.Models.Usuario", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignador");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.Medico", b =>
                {
                    b.HasOne("Lab01_Grupo1.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.PerfilMedico", b =>
                {
                    b.HasOne("Lab01_Grupo1.Models.Medico", null)
                        .WithOne("Perfil")
                        .HasForeignKey("Lab01_Grupo1.Models.PerfilMedico", "IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.TelefonoMedico", b =>
                {
                    b.HasOne("Lab01_Grupo1.Models.Medico", "Medico")
                        .WithMany("Telefonos")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TelefonoMedico_Medico");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Lab01_Grupo1.Models.Medico", b =>
                {
                    b.Navigation("Perfil");

                    b.Navigation("Telefonos");
                });
#pragma warning restore 612, 618
        }
    }
}
